{"ast":null,"code":"import { isomorphicAtob } from \"./chunk-TETGTEI2.mjs\";\nimport { isomorphicBtoa } from \"./chunk-KOH7GTJO.mjs\";\nimport { DEV_OR_STAGING_SUFFIXES, LEGACY_DEV_INSTANCE_SUFFIXES } from \"./chunk-I6MTSTOF.mjs\";\n\n// src/keys.ts\nvar PUBLISHABLE_KEY_LIVE_PREFIX = \"pk_live_\";\nvar PUBLISHABLE_KEY_TEST_PREFIX = \"pk_test_\";\nvar PUBLISHABLE_FRONTEND_API_DEV_REGEX = /^(([a-z]+)-){2}([0-9]{1,2})\\.clerk\\.accounts([a-z.]*)(dev|com)$/i;\nfunction buildPublishableKey(frontendApi) {\n  const isDevKey = PUBLISHABLE_FRONTEND_API_DEV_REGEX.test(frontendApi) || frontendApi.startsWith(\"clerk.\") && LEGACY_DEV_INSTANCE_SUFFIXES.some(s => frontendApi.endsWith(s));\n  const keyPrefix = isDevKey ? PUBLISHABLE_KEY_TEST_PREFIX : PUBLISHABLE_KEY_LIVE_PREFIX;\n  return `${keyPrefix}${isomorphicBtoa(`${frontendApi}$`)}`;\n}\nfunction parsePublishableKey(key, options = {}) {\n  key = key || \"\";\n  if (!key || !isPublishableKey(key)) {\n    if (options.fatal && !key) {\n      throw new Error(\"Publishable key is missing. Ensure that your publishable key is correctly configured. Double-check your environment configuration for your keys, or access them here: https://dashboard.clerk.com/last-active?path=api-keys\");\n    }\n    if (options.fatal && !isPublishableKey(key)) {\n      throw new Error(\"Publishable key not valid.\");\n    }\n    return null;\n  }\n  const instanceType = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) ? \"production\" : \"development\";\n  let frontendApi = isomorphicAtob(key.split(\"_\")[2]);\n  frontendApi = frontendApi.slice(0, -1);\n  if (options.proxyUrl) {\n    frontendApi = options.proxyUrl;\n  } else if (instanceType !== \"development\" && options.domain) {\n    frontendApi = `clerk.${options.domain}`;\n  }\n  return {\n    instanceType,\n    frontendApi\n  };\n}\nfunction isPublishableKey(key) {\n  key = key || \"\";\n  const hasValidPrefix = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) || key.startsWith(PUBLISHABLE_KEY_TEST_PREFIX);\n  const hasValidFrontendApiPostfix = isomorphicAtob(key.split(\"_\")[2] || \"\").endsWith(\"$\");\n  return hasValidPrefix && hasValidFrontendApiPostfix;\n}\nfunction createDevOrStagingUrlCache() {\n  const devOrStagingUrlCache = /* @__PURE__ */new Map();\n  return {\n    isDevOrStagingUrl: url => {\n      if (!url) {\n        return false;\n      }\n      const hostname = typeof url === \"string\" ? url : url.hostname;\n      let res = devOrStagingUrlCache.get(hostname);\n      if (res === void 0) {\n        res = DEV_OR_STAGING_SUFFIXES.some(s => hostname.endsWith(s));\n        devOrStagingUrlCache.set(hostname, res);\n      }\n      return res;\n    }\n  };\n}\nfunction isDevelopmentFromPublishableKey(apiKey) {\n  return apiKey.startsWith(\"test_\") || apiKey.startsWith(\"pk_test_\");\n}\nfunction isProductionFromPublishableKey(apiKey) {\n  return apiKey.startsWith(\"live_\") || apiKey.startsWith(\"pk_live_\");\n}\nfunction isDevelopmentFromSecretKey(apiKey) {\n  return apiKey.startsWith(\"test_\") || apiKey.startsWith(\"sk_test_\");\n}\nfunction isProductionFromSecretKey(apiKey) {\n  return apiKey.startsWith(\"live_\") || apiKey.startsWith(\"sk_live_\");\n}\nasync function getCookieSuffix(publishableKey, subtle = globalThis.crypto.subtle) {\n  const data = new TextEncoder().encode(publishableKey);\n  const digest = await subtle.digest(\"sha-1\", data);\n  const stringDigest = String.fromCharCode(...new Uint8Array(digest));\n  return isomorphicBtoa(stringDigest).replace(/\\+/gi, \"-\").replace(/\\//gi, \"_\").substring(0, 8);\n}\nvar getSuffixedCookieName = (cookieName, cookieSuffix) => {\n  return `${cookieName}_${cookieSuffix}`;\n};\nexport { buildPublishableKey, parsePublishableKey, isPublishableKey, createDevOrStagingUrlCache, isDevelopmentFromPublishableKey, isProductionFromPublishableKey, isDevelopmentFromSecretKey, isProductionFromSecretKey, getCookieSuffix, getSuffixedCookieName };","map":{"version":3,"names":["PUBLISHABLE_KEY_LIVE_PREFIX","PUBLISHABLE_KEY_TEST_PREFIX","PUBLISHABLE_FRONTEND_API_DEV_REGEX","buildPublishableKey","frontendApi","isDevKey","test","startsWith","LEGACY_DEV_INSTANCE_SUFFIXES","some","s","endsWith","keyPrefix","isomorphicBtoa","parsePublishableKey","key","options","isPublishableKey","fatal","Error","instanceType","isomorphicAtob","split","slice","proxyUrl","domain","hasValidPrefix","hasValidFrontendApiPostfix","createDevOrStagingUrlCache","devOrStagingUrlCache","Map","isDevOrStagingUrl","url","hostname","res","get","DEV_OR_STAGING_SUFFIXES","set","isDevelopmentFromPublishableKey","apiKey","isProductionFromPublishableKey","isDevelopmentFromSecretKey","isProductionFromSecretKey","getCookieSuffix","publishableKey","subtle","globalThis","crypto","data","TextEncoder","encode","digest","stringDigest","String","fromCharCode","Uint8Array","replace","substring","getSuffixedCookieName","cookieName","cookieSuffix"],"sources":["/home/usl-sz-0158/Downloads/assessment/socioyt/node_modules/@clerk/shared/src/keys.ts"],"sourcesContent":["import type { PublishableKey } from '@clerk/types';\n\nimport { DEV_OR_STAGING_SUFFIXES, LEGACY_DEV_INSTANCE_SUFFIXES } from './constants';\nimport { isomorphicAtob } from './isomorphicAtob';\nimport { isomorphicBtoa } from './isomorphicBtoa';\n\ntype ParsePublishableKeyOptions = {\n  fatal?: boolean;\n  domain?: string;\n  proxyUrl?: string;\n};\n\nconst PUBLISHABLE_KEY_LIVE_PREFIX = 'pk_live_';\nconst PUBLISHABLE_KEY_TEST_PREFIX = 'pk_test_';\n\n// This regex matches the publishable like frontend API keys (e.g. foo-bar-13.clerk.accounts.dev)\nconst PUBLISHABLE_FRONTEND_API_DEV_REGEX = /^(([a-z]+)-){2}([0-9]{1,2})\\.clerk\\.accounts([a-z.]*)(dev|com)$/i;\n\nexport function buildPublishableKey(frontendApi: string): string {\n  const isDevKey =\n    PUBLISHABLE_FRONTEND_API_DEV_REGEX.test(frontendApi) ||\n    (frontendApi.startsWith('clerk.') && LEGACY_DEV_INSTANCE_SUFFIXES.some(s => frontendApi.endsWith(s)));\n  const keyPrefix = isDevKey ? PUBLISHABLE_KEY_TEST_PREFIX : PUBLISHABLE_KEY_LIVE_PREFIX;\n  return `${keyPrefix}${isomorphicBtoa(`${frontendApi}$`)}`;\n}\n\nexport function parsePublishableKey(\n  key: string | undefined,\n  options: ParsePublishableKeyOptions & { fatal: true },\n): PublishableKey;\nexport function parsePublishableKey(\n  key: string | undefined,\n  options?: ParsePublishableKeyOptions,\n): PublishableKey | null;\nexport function parsePublishableKey(\n  key: string | undefined,\n  options: { fatal?: boolean; domain?: string; proxyUrl?: string } = {},\n): PublishableKey | null {\n  key = key || '';\n\n  if (!key || !isPublishableKey(key)) {\n    if (options.fatal && !key) {\n      throw new Error(\n        'Publishable key is missing. Ensure that your publishable key is correctly configured. Double-check your environment configuration for your keys, or access them here: https://dashboard.clerk.com/last-active?path=api-keys',\n      );\n    }\n    if (options.fatal && !isPublishableKey(key)) {\n      throw new Error('Publishable key not valid.');\n    }\n    return null;\n  }\n\n  const instanceType = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) ? 'production' : 'development';\n\n  let frontendApi = isomorphicAtob(key.split('_')[2]);\n\n  // TODO(@dimkl): validate packages/clerk-js/src/utils/instance.ts\n  frontendApi = frontendApi.slice(0, -1);\n\n  if (options.proxyUrl) {\n    frontendApi = options.proxyUrl;\n  } else if (instanceType !== 'development' && options.domain) {\n    frontendApi = `clerk.${options.domain}`;\n  }\n\n  return {\n    instanceType,\n    frontendApi,\n  };\n}\n\nexport function isPublishableKey(key: string) {\n  key = key || '';\n\n  const hasValidPrefix = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) || key.startsWith(PUBLISHABLE_KEY_TEST_PREFIX);\n\n  const hasValidFrontendApiPostfix = isomorphicAtob(key.split('_')[2] || '').endsWith('$');\n\n  return hasValidPrefix && hasValidFrontendApiPostfix;\n}\n\nexport function createDevOrStagingUrlCache() {\n  const devOrStagingUrlCache = new Map<string, boolean>();\n\n  return {\n    isDevOrStagingUrl: (url: string | URL): boolean => {\n      if (!url) {\n        return false;\n      }\n\n      const hostname = typeof url === 'string' ? url : url.hostname;\n      let res = devOrStagingUrlCache.get(hostname);\n      if (res === undefined) {\n        res = DEV_OR_STAGING_SUFFIXES.some(s => hostname.endsWith(s));\n        devOrStagingUrlCache.set(hostname, res);\n      }\n      return res;\n    },\n  };\n}\n\nexport function isDevelopmentFromPublishableKey(apiKey: string): boolean {\n  return apiKey.startsWith('test_') || apiKey.startsWith('pk_test_');\n}\n\nexport function isProductionFromPublishableKey(apiKey: string): boolean {\n  return apiKey.startsWith('live_') || apiKey.startsWith('pk_live_');\n}\n\nexport function isDevelopmentFromSecretKey(apiKey: string): boolean {\n  return apiKey.startsWith('test_') || apiKey.startsWith('sk_test_');\n}\n\nexport function isProductionFromSecretKey(apiKey: string): boolean {\n  return apiKey.startsWith('live_') || apiKey.startsWith('sk_live_');\n}\n\nexport async function getCookieSuffix(\n  publishableKey: string,\n  subtle: SubtleCrypto = globalThis.crypto.subtle,\n): Promise<string> {\n  const data = new TextEncoder().encode(publishableKey);\n  const digest = await subtle.digest('sha-1', data);\n  const stringDigest = String.fromCharCode(...new Uint8Array(digest));\n  // Base 64 Encoding with URL and Filename Safe Alphabet: https://datatracker.ietf.org/doc/html/rfc4648#section-5\n  return isomorphicBtoa(stringDigest).replace(/\\+/gi, '-').replace(/\\//gi, '_').substring(0, 8);\n}\n\nexport const getSuffixedCookieName = (cookieName: string, cookieSuffix: string): string => {\n  return `${cookieName}_${cookieSuffix}`;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}