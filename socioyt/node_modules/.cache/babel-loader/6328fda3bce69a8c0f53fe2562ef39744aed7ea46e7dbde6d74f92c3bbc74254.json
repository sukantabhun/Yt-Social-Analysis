{"ast":null,"code":"// src/authorization.ts\nvar TYPES_TO_OBJECTS = {\n  strict_mfa: {\n    afterMinutes: 10,\n    level: \"multi_factor\"\n  },\n  strict: {\n    afterMinutes: 10,\n    level: \"second_factor\"\n  },\n  moderate: {\n    afterMinutes: 60,\n    level: \"second_factor\"\n  },\n  lax: {\n    afterMinutes: 1440,\n    level: \"second_factor\"\n  }\n};\nvar ALLOWED_LEVELS = /* @__PURE__ */new Set([\"first_factor\", \"second_factor\", \"multi_factor\"]);\nvar ALLOWED_TYPES = /* @__PURE__ */new Set([\"strict_mfa\", \"strict\", \"moderate\", \"lax\"]);\nvar isValidMaxAge = maxAge => typeof maxAge === \"number\" && maxAge > 0;\nvar isValidLevel = level => ALLOWED_LEVELS.has(level);\nvar isValidVerificationType = type => ALLOWED_TYPES.has(type);\nvar checkOrgAuthorization = (params, options) => {\n  const {\n    orgId,\n    orgRole,\n    orgPermissions\n  } = options;\n  if (!params.role && !params.permission) {\n    return null;\n  }\n  if (!orgId || !orgRole || !orgPermissions) {\n    return null;\n  }\n  if (params.permission) {\n    return orgPermissions.includes(params.permission);\n  }\n  if (params.role) {\n    return orgRole === params.role;\n  }\n  return null;\n};\nvar validateReverificationConfig = config => {\n  if (!config) {\n    return false;\n  }\n  const convertConfigToObject = config2 => {\n    if (typeof config2 === \"string\") {\n      return TYPES_TO_OBJECTS[config2];\n    }\n    return config2;\n  };\n  const isValidStringValue = typeof config === \"string\" && isValidVerificationType(config);\n  const isValidObjectValue = typeof config === \"object\" && isValidLevel(config.level) && isValidMaxAge(config.afterMinutes);\n  if (isValidStringValue || isValidObjectValue) {\n    return convertConfigToObject.bind(null, config);\n  }\n  return false;\n};\nvar checkStepUpAuthorization = (params, {\n  factorVerificationAge\n}) => {\n  if (!params.reverification || !factorVerificationAge) {\n    return null;\n  }\n  const isValidReverification = validateReverificationConfig(params.reverification);\n  if (!isValidReverification) {\n    return null;\n  }\n  const {\n    level,\n    afterMinutes\n  } = isValidReverification();\n  const [factor1Age, factor2Age] = factorVerificationAge;\n  const isValidFactor1 = factor1Age !== -1 ? afterMinutes > factor1Age : null;\n  const isValidFactor2 = factor2Age !== -1 ? afterMinutes > factor2Age : null;\n  switch (level) {\n    case \"first_factor\":\n      return isValidFactor1;\n    case \"second_factor\":\n      return factor2Age !== -1 ? isValidFactor2 : isValidFactor1;\n    case \"multi_factor\":\n      return factor2Age === -1 ? isValidFactor1 : isValidFactor1 && isValidFactor2;\n  }\n};\nvar createCheckAuthorization = options => {\n  return params => {\n    if (!options.userId) {\n      return false;\n    }\n    const orgAuthorization = checkOrgAuthorization(params, options);\n    const stepUpAuthorization = checkStepUpAuthorization(params, options);\n    if ([orgAuthorization, stepUpAuthorization].some(a => a === null)) {\n      return [orgAuthorization, stepUpAuthorization].some(a => a === true);\n    }\n    return [orgAuthorization, stepUpAuthorization].every(a => a === true);\n  };\n};\nexport { validateReverificationConfig, createCheckAuthorization };","map":{"version":3,"names":["TYPES_TO_OBJECTS","strict_mfa","afterMinutes","level","strict","moderate","lax","ALLOWED_LEVELS","Set","ALLOWED_TYPES","isValidMaxAge","maxAge","isValidLevel","has","isValidVerificationType","type","checkOrgAuthorization","params","options","orgId","orgRole","orgPermissions","role","permission","includes","validateReverificationConfig","config","convertConfigToObject","config2","isValidStringValue","isValidObjectValue","bind","checkStepUpAuthorization","factorVerificationAge","reverification","isValidReverification","factor1Age","factor2Age","isValidFactor1","isValidFactor2","createCheckAuthorization","userId","orgAuthorization","stepUpAuthorization","some","a","every"],"sources":["/home/usl-sz-0158/Downloads/assessment/socioyt/node_modules/@clerk/shared/src/authorization.ts"],"sourcesContent":["import type {\n  CheckAuthorizationWithCustomPermissions,\n  OrganizationCustomPermissionKey,\n  OrganizationCustomRoleKey,\n  ReverificationConfig,\n  SessionVerificationLevel,\n  SessionVerificationTypes,\n} from '@clerk/types';\n\ntype TypesToConfig = Record<SessionVerificationTypes, Exclude<ReverificationConfig, SessionVerificationTypes>>;\ntype AuthorizationOptions = {\n  userId: string | null | undefined;\n  orgId: string | null | undefined;\n  orgRole: string | null | undefined;\n  orgPermissions: string[] | null | undefined;\n  factorVerificationAge: [number, number] | null;\n};\n\ntype CheckOrgAuthorization = (\n  params: { role?: OrganizationCustomRoleKey; permission?: OrganizationCustomPermissionKey },\n  { orgId, orgRole, orgPermissions }: AuthorizationOptions,\n) => boolean | null;\n\ntype CheckStepUpAuthorization = (\n  params: {\n    reverification?: ReverificationConfig;\n  },\n  { factorVerificationAge }: AuthorizationOptions,\n) => boolean | null;\n\nconst TYPES_TO_OBJECTS: TypesToConfig = {\n  strict_mfa: {\n    afterMinutes: 10,\n    level: 'multi_factor',\n  },\n  strict: {\n    afterMinutes: 10,\n    level: 'second_factor',\n  },\n  moderate: {\n    afterMinutes: 60,\n    level: 'second_factor',\n  },\n  lax: {\n    afterMinutes: 1_440,\n    level: 'second_factor',\n  },\n};\n\nconst ALLOWED_LEVELS = new Set<SessionVerificationLevel>(['first_factor', 'second_factor', 'multi_factor']);\n\nconst ALLOWED_TYPES = new Set<SessionVerificationTypes>(['strict_mfa', 'strict', 'moderate', 'lax']);\n\n// Helper functions\nconst isValidMaxAge = (maxAge: any) => typeof maxAge === 'number' && maxAge > 0;\nconst isValidLevel = (level: any) => ALLOWED_LEVELS.has(level);\nconst isValidVerificationType = (type: any) => ALLOWED_TYPES.has(type);\n\n/**\n * Checks if a user has the required organization-level authorization.\n * Verifies if the user has the specified role or permission within their organization.\n * @returns null, if unable to determine due to missing data or unspecified role/permission.\n */\nconst checkOrgAuthorization: CheckOrgAuthorization = (params, options) => {\n  const { orgId, orgRole, orgPermissions } = options;\n  if (!params.role && !params.permission) {\n    return null;\n  }\n  if (!orgId || !orgRole || !orgPermissions) {\n    return null;\n  }\n\n  if (params.permission) {\n    return orgPermissions.includes(params.permission);\n  }\n  if (params.role) {\n    return orgRole === params.role;\n  }\n  return null;\n};\n\nconst validateReverificationConfig = (config: ReverificationConfig | undefined | null) => {\n  if (!config) {\n    return false;\n  }\n\n  const convertConfigToObject = (config: ReverificationConfig) => {\n    if (typeof config === 'string') {\n      return TYPES_TO_OBJECTS[config];\n    }\n    return config;\n  };\n\n  const isValidStringValue = typeof config === 'string' && isValidVerificationType(config);\n  const isValidObjectValue =\n    typeof config === 'object' && isValidLevel(config.level) && isValidMaxAge(config.afterMinutes);\n\n  if (isValidStringValue || isValidObjectValue) {\n    return convertConfigToObject.bind(null, config);\n  }\n\n  return false;\n};\n\n/**\n * Evaluates if the user meets step-up authentication requirements.\n * Compares the user's factor verification ages against the specified maxAge.\n * Handles different verification levels (first factor, second factor, multi-factor).\n * @returns null, if requirements or verification data are missing.\n */\nconst checkStepUpAuthorization: CheckStepUpAuthorization = (params, { factorVerificationAge }) => {\n  if (!params.reverification || !factorVerificationAge) {\n    return null;\n  }\n\n  const isValidReverification = validateReverificationConfig(params.reverification);\n  if (!isValidReverification) {\n    return null;\n  }\n\n  const { level, afterMinutes } = isValidReverification();\n  const [factor1Age, factor2Age] = factorVerificationAge;\n\n  // -1 indicates the factor group (1fa,2fa) is not enabled\n  // -1 for 1fa is not a valid scenario, but we need to make sure we handle it properly\n  const isValidFactor1 = factor1Age !== -1 ? afterMinutes > factor1Age : null;\n  const isValidFactor2 = factor2Age !== -1 ? afterMinutes > factor2Age : null;\n\n  switch (level) {\n    case 'first_factor':\n      return isValidFactor1;\n    case 'second_factor':\n      return factor2Age !== -1 ? isValidFactor2 : isValidFactor1;\n    case 'multi_factor':\n      return factor2Age === -1 ? isValidFactor1 : isValidFactor1 && isValidFactor2;\n  }\n};\n\n/**\n * Creates a function for comprehensive user authorization checks.\n * Combines organization-level and step-up authentication checks.\n * The returned function authorizes if both checks pass, or if at least one passes\n * when the other is indeterminate. Fails if userId is missing.\n */\nconst createCheckAuthorization = (options: AuthorizationOptions): CheckAuthorizationWithCustomPermissions => {\n  return (params): boolean => {\n    if (!options.userId) {\n      return false;\n    }\n\n    const orgAuthorization = checkOrgAuthorization(params, options);\n    const stepUpAuthorization = checkStepUpAuthorization(params, options);\n\n    if ([orgAuthorization, stepUpAuthorization].some(a => a === null)) {\n      return [orgAuthorization, stepUpAuthorization].some(a => a === true);\n    }\n\n    return [orgAuthorization, stepUpAuthorization].every(a => a === true);\n  };\n};\n\nexport { createCheckAuthorization, validateReverificationConfig };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}