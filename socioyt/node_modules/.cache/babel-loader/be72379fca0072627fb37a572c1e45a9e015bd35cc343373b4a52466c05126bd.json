{"ast":null,"code":"import { versionSelector } from \"./chunk-VDBRW7A3.mjs\";\nimport { isValidProxyUrl, proxyUrlToAbsoluteURL } from \"./chunk-6NDGN2IU.mjs\";\nimport { addClerkPrefix } from \"./chunk-IFTVZ2LQ.mjs\";\nimport { loadScript } from \"./chunk-DKITONR4.mjs\";\nimport { buildErrorThrower } from \"./chunk-DL452J2I.mjs\";\nimport { createDevOrStagingUrlCache, parsePublishableKey } from \"./chunk-NJGRVCG7.mjs\";\n\n// src/loadClerkJsScript.ts\nvar FAILED_TO_LOAD_ERROR = \"Clerk: Failed to load Clerk\";\nvar {\n  isDevOrStagingUrl\n} = createDevOrStagingUrlCache();\nvar errorThrower = buildErrorThrower({\n  packageName: \"@clerk/shared\"\n});\nfunction setClerkJsLoadingErrorPackageName(packageName) {\n  errorThrower.setPackageName({\n    packageName\n  });\n}\nvar loadClerkJsScript = async opts => {\n  const existingScript = document.querySelector(\"script[data-clerk-js-script]\");\n  if (existingScript) {\n    return new Promise((resolve, reject) => {\n      existingScript.addEventListener(\"load\", () => {\n        resolve(existingScript);\n      });\n      existingScript.addEventListener(\"error\", () => {\n        reject(FAILED_TO_LOAD_ERROR);\n      });\n    });\n  }\n  if (!(opts == null ? void 0 : opts.publishableKey)) {\n    errorThrower.throwMissingPublishableKeyError();\n    return;\n  }\n  return loadScript(clerkJsScriptUrl(opts), {\n    async: true,\n    crossOrigin: \"anonymous\",\n    nonce: opts.nonce,\n    beforeLoad: applyClerkJsScriptAttributes(opts)\n  }).catch(() => {\n    throw new Error(FAILED_TO_LOAD_ERROR);\n  });\n};\nvar clerkJsScriptUrl = opts => {\n  var _a, _b;\n  const {\n    clerkJSUrl,\n    clerkJSVariant,\n    clerkJSVersion,\n    proxyUrl,\n    domain,\n    publishableKey\n  } = opts;\n  if (clerkJSUrl) {\n    return clerkJSUrl;\n  }\n  let scriptHost = \"\";\n  if (!!proxyUrl && isValidProxyUrl(proxyUrl)) {\n    scriptHost = proxyUrlToAbsoluteURL(proxyUrl).replace(/http(s)?:\\/\\//, \"\");\n  } else if (domain && !isDevOrStagingUrl(((_a = parsePublishableKey(publishableKey)) == null ? void 0 : _a.frontendApi) || \"\")) {\n    scriptHost = addClerkPrefix(domain);\n  } else {\n    scriptHost = ((_b = parsePublishableKey(publishableKey)) == null ? void 0 : _b.frontendApi) || \"\";\n  }\n  const variant = clerkJSVariant ? `${clerkJSVariant.replace(/\\.+$/, \"\")}.` : \"\";\n  const version = versionSelector(clerkJSVersion);\n  return `https://${scriptHost}/npm/@clerk/clerk-js@${version}/dist/clerk.${variant}browser.js`;\n};\nvar buildClerkJsScriptAttributes = options => {\n  const obj = {};\n  if (options.publishableKey) {\n    obj[\"data-clerk-publishable-key\"] = options.publishableKey;\n  }\n  if (options.proxyUrl) {\n    obj[\"data-clerk-proxy-url\"] = options.proxyUrl;\n  }\n  if (options.domain) {\n    obj[\"data-clerk-domain\"] = options.domain;\n  }\n  if (options.nonce) {\n    obj.nonce = options.nonce;\n  }\n  return obj;\n};\nvar applyClerkJsScriptAttributes = options => script => {\n  const attributes = buildClerkJsScriptAttributes(options);\n  for (const attribute in attributes) {\n    script.setAttribute(attribute, attributes[attribute]);\n  }\n};\nexport { setClerkJsLoadingErrorPackageName, loadClerkJsScript, clerkJsScriptUrl, buildClerkJsScriptAttributes };","map":{"version":3,"names":["FAILED_TO_LOAD_ERROR","isDevOrStagingUrl","createDevOrStagingUrlCache","errorThrower","buildErrorThrower","packageName","setClerkJsLoadingErrorPackageName","setPackageName","loadClerkJsScript","opts","existingScript","document","querySelector","Promise","resolve","reject","addEventListener","publishableKey","throwMissingPublishableKeyError","loadScript","clerkJsScriptUrl","async","crossOrigin","nonce","beforeLoad","applyClerkJsScriptAttributes","catch","Error","_a","_b","clerkJSUrl","clerkJSVariant","clerkJSVersion","proxyUrl","domain","scriptHost","isValidProxyUrl","proxyUrlToAbsoluteURL","replace","parsePublishableKey","frontendApi","addClerkPrefix","variant","version","versionSelector","buildClerkJsScriptAttributes","options","obj","script","attributes","attribute","setAttribute"],"sources":["/home/usl-sz-0158/Downloads/assessment/socioyt/node_modules/@clerk/shared/src/loadClerkJsScript.ts"],"sourcesContent":["import type { ClerkOptions, SDKMetadata, Without } from '@clerk/types';\n\nimport { buildErrorThrower } from './error';\nimport { createDevOrStagingUrlCache, parsePublishableKey } from './keys';\nimport { loadScript } from './loadScript';\nimport { isValidProxyUrl, proxyUrlToAbsoluteURL } from './proxy';\nimport { addClerkPrefix } from './url';\nimport { versionSelector } from './versionSelector';\n\nconst FAILED_TO_LOAD_ERROR = 'Clerk: Failed to load Clerk';\n\nconst { isDevOrStagingUrl } = createDevOrStagingUrlCache();\n\nconst errorThrower = buildErrorThrower({ packageName: '@clerk/shared' });\n\n/**\n * Sets the package name for error messages during ClerkJS script loading.\n *\n * @example\n * setClerkJsLoadingErrorPackageName('@clerk/clerk-react');\n */\nexport function setClerkJsLoadingErrorPackageName(packageName: string) {\n  errorThrower.setPackageName({ packageName });\n}\n\ntype LoadClerkJsScriptOptions = Without<ClerkOptions, 'isSatellite'> & {\n  publishableKey: string;\n  clerkJSUrl?: string;\n  clerkJSVariant?: 'headless' | '';\n  clerkJSVersion?: string;\n  sdkMetadata?: SDKMetadata;\n  proxyUrl?: string;\n  domain?: string;\n  nonce?: string;\n};\n\n/**\n * Hotloads the Clerk JS script.\n *\n * Checks for an existing Clerk JS script. If found, it returns a promise\n * that resolves when the script loads. If not found, it uses the provided options to\n * build the Clerk JS script URL and load the script.\n *\n * @param opts - The options used to build the Clerk JS script URL and load the script.\n *               Must include a `publishableKey` if no existing script is found.\n *\n * @example\n * loadClerkJsScript({ publishableKey: 'pk_' });\n */\nconst loadClerkJsScript = async (opts?: LoadClerkJsScriptOptions) => {\n  const existingScript = document.querySelector<HTMLScriptElement>('script[data-clerk-js-script]');\n\n  if (existingScript) {\n    return new Promise((resolve, reject) => {\n      existingScript.addEventListener('load', () => {\n        resolve(existingScript);\n      });\n\n      existingScript.addEventListener('error', () => {\n        reject(FAILED_TO_LOAD_ERROR);\n      });\n    });\n  }\n\n  if (!opts?.publishableKey) {\n    errorThrower.throwMissingPublishableKeyError();\n    return;\n  }\n\n  return loadScript(clerkJsScriptUrl(opts), {\n    async: true,\n    crossOrigin: 'anonymous',\n    nonce: opts.nonce,\n    beforeLoad: applyClerkJsScriptAttributes(opts),\n  }).catch(() => {\n    throw new Error(FAILED_TO_LOAD_ERROR);\n  });\n};\n\n/**\n * Generates a Clerk JS script URL.\n *\n * @param opts - The options to use when building the Clerk JS script URL.\n *\n * @example\n * clerkJsScriptUrl({ publishableKey: 'pk_' });\n */\nconst clerkJsScriptUrl = (opts: LoadClerkJsScriptOptions) => {\n  const { clerkJSUrl, clerkJSVariant, clerkJSVersion, proxyUrl, domain, publishableKey } = opts;\n\n  if (clerkJSUrl) {\n    return clerkJSUrl;\n  }\n\n  let scriptHost = '';\n  if (!!proxyUrl && isValidProxyUrl(proxyUrl)) {\n    scriptHost = proxyUrlToAbsoluteURL(proxyUrl).replace(/http(s)?:\\/\\//, '');\n  } else if (domain && !isDevOrStagingUrl(parsePublishableKey(publishableKey)?.frontendApi || '')) {\n    scriptHost = addClerkPrefix(domain);\n  } else {\n    scriptHost = parsePublishableKey(publishableKey)?.frontendApi || '';\n  }\n\n  const variant = clerkJSVariant ? `${clerkJSVariant.replace(/\\.+$/, '')}.` : '';\n  const version = versionSelector(clerkJSVersion);\n  return `https://${scriptHost}/npm/@clerk/clerk-js@${version}/dist/clerk.${variant}browser.js`;\n};\n\n/**\n * Builds an object of Clerk JS script attributes.\n */\nconst buildClerkJsScriptAttributes = (options: LoadClerkJsScriptOptions) => {\n  const obj: Record<string, string> = {};\n\n  if (options.publishableKey) {\n    obj['data-clerk-publishable-key'] = options.publishableKey;\n  }\n\n  if (options.proxyUrl) {\n    obj['data-clerk-proxy-url'] = options.proxyUrl;\n  }\n\n  if (options.domain) {\n    obj['data-clerk-domain'] = options.domain;\n  }\n\n  if (options.nonce) {\n    obj.nonce = options.nonce;\n  }\n\n  return obj;\n};\n\nconst applyClerkJsScriptAttributes = (options: LoadClerkJsScriptOptions) => (script: HTMLScriptElement) => {\n  const attributes = buildClerkJsScriptAttributes(options);\n  for (const attribute in attributes) {\n    script.setAttribute(attribute, attributes[attribute]);\n  }\n};\n\nexport { loadClerkJsScript, buildClerkJsScriptAttributes, clerkJsScriptUrl };\nexport type { LoadClerkJsScriptOptions };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}