{"ast":null,"code":"// src/versionSelector.ts\nvar versionSelector = (clerkJSVersion, packageVersion = \"5.45.2\") => {\n  if (clerkJSVersion) {\n    return clerkJSVersion;\n  }\n  const prereleaseTag = getPrereleaseTag(packageVersion);\n  if (prereleaseTag) {\n    if (prereleaseTag === \"snapshot\") {\n      return \"5.45.2\";\n    }\n    return prereleaseTag;\n  }\n  return getMajorVersion(packageVersion);\n};\nvar getPrereleaseTag = packageVersion => {\n  var _a;\n  return (_a = packageVersion.trim().replace(/^v/, \"\").match(/-(.+?)(\\.|$)/)) == null ? void 0 : _a[1];\n};\nvar getMajorVersion = packageVersion => packageVersion.trim().replace(/^v/, \"\").split(\".\")[0];\nexport { versionSelector, getMajorVersion };","map":{"version":3,"names":["versionSelector","clerkJSVersion","packageVersion","prereleaseTag","getPrereleaseTag","getMajorVersion","_a","trim","replace","match","split"],"sources":["/home/usl-sz-0158/Downloads/assessment/socioyt/node_modules/@clerk/shared/src/versionSelector.ts"],"sourcesContent":["/**\n * This version selector is a bit complicated, so here is the flow:\n * 1. Use the clerkJSVersion prop on the provider\n * 2. Use the exact `@clerk/clerk-js` version if it is a `@snapshot` prerelease\n * 3. Use the prerelease tag of `@clerk/clerk-js` or the packageVersion provided\n * 4. Fallback to the major version of `@clerk/clerk-js` or the packageVersion provided\n * @param clerkJSVersion - The optional clerkJSVersion prop on the provider\n * @param packageVersion - The version of `@clerk/clerk-js` that will be used if an explicit version is not provided\n * @returns The npm tag, version or major version to use\n */\nexport const versionSelector = (clerkJSVersion: string | undefined, packageVersion = JS_PACKAGE_VERSION) => {\n  if (clerkJSVersion) {\n    return clerkJSVersion;\n  }\n\n  const prereleaseTag = getPrereleaseTag(packageVersion);\n  if (prereleaseTag) {\n    if (prereleaseTag === 'snapshot') {\n      return JS_PACKAGE_VERSION;\n    }\n\n    return prereleaseTag;\n  }\n\n  return getMajorVersion(packageVersion);\n};\n\nconst getPrereleaseTag = (packageVersion: string) =>\n  packageVersion\n    .trim()\n    .replace(/^v/, '')\n    .match(/-(.+?)(\\.|$)/)?.[1];\n\nexport const getMajorVersion = (packageVersion: string) => packageVersion.trim().replace(/^v/, '').split('.')[0];\n"],"mappings":";AAUO,IAAMA,eAAA,GAAkBA,CAACC,cAAA,EAAoCC,cAAA,GAAiB,aAAuB;EAC1G,IAAID,cAAA,EAAgB;IAClB,OAAOA,cAAA;EACT;EAEA,MAAME,aAAA,GAAgBC,gBAAA,CAAiBF,cAAc;EACrD,IAAIC,aAAA,EAAe;IACjB,IAAIA,aAAA,KAAkB,YAAY;MAChC,OAAO;IACT;IAEA,OAAOA,aAAA;EACT;EAEA,OAAOE,eAAA,CAAgBH,cAAc;AACvC;AAEA,IAAME,gBAAA,GAAoBF,cAAA,IAAwB;EA3BlD,IAAAI,EAAA;EA4BE,QAAAA,EAAA,GAAAJ,cAAA,CACGK,IAAA,CAAK,EACLC,OAAA,CAAQ,MAAM,EAAE,EAChBC,KAAA,CAAM,cAAc,MAHvB,gBAAAH,EAAA,CAG2B;AAAA;AAEtB,IAAMD,eAAA,GAAmBH,cAAA,IAA2BA,cAAA,CAAeK,IAAA,CAAK,EAAEC,OAAA,CAAQ,MAAM,EAAE,EAAEE,KAAA,CAAM,GAAG,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}